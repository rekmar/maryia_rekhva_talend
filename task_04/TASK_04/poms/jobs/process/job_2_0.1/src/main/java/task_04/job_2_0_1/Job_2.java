// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package task_04.job_2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.ParseFilePath;
import routines.TalendString;
import routines.StringHandling;
import routines.ConvertToBase64;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Job_2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class Job_2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (talend_AdditionalParams != null) {

				this.setProperty("talend_AdditionalParams",
						talend_AdditionalParams.toString());

			}

			if (talend_Server != null) {

				this.setProperty("talend_Server", talend_Server.toString());

			}

			if (talend_ServiceName != null) {

				this.setProperty("talend_ServiceName",
						talend_ServiceName.toString());

			}

			if (talend_Schema != null) {

				this.setProperty("talend_Schema", talend_Schema.toString());

			}

			if (talend_Login != null) {

				this.setProperty("talend_Login", talend_Login.toString());

			}

			if (talend_Port != null) {

				this.setProperty("talend_Port", talend_Port.toString());

			}

			if (talend_Password != null) {

				this.setProperty("talend_Password", talend_Password.toString());

			}

		}

		public String talend_AdditionalParams;

		public String getTalend_AdditionalParams() {
			return this.talend_AdditionalParams;
		}

		public String talend_Server;

		public String getTalend_Server() {
			return this.talend_Server;
		}

		public String talend_ServiceName;

		public String getTalend_ServiceName() {
			return this.talend_ServiceName;
		}

		public String talend_Schema;

		public String getTalend_Schema() {
			return this.talend_Schema;
		}

		public String talend_Login;

		public String getTalend_Login() {
			return this.talend_Login;
		}

		public String talend_Port;

		public String getTalend_Port() {
			return this.talend_Port;
		}

		public java.lang.String talend_Password;

		public java.lang.String getTalend_Password() {
			return this.talend_Password;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Job_2";
	private final String projectName = "TASK_04";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Job_2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Job_2.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputRaw_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputRaw_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TASK_04_Job_2 = new byte[0];
		static byte[] commonByteArray_TASK_04_Job_2 = new byte[0];

		public Object Bytes;

		public Object getBytes() {
			return this.Bytes;
		}

		public String File_Name;

		public String getFile_Name() {
			return this.File_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_04_Job_2.length) {
					if (length < 1024
							&& commonByteArray_TASK_04_Job_2.length == 0) {
						commonByteArray_TASK_04_Job_2 = new byte[1024];
					} else {
						commonByteArray_TASK_04_Job_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_04_Job_2, 0, length);
				strReturn = new String(commonByteArray_TASK_04_Job_2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_04_Job_2) {

				try {

					int length = 0;

					this.Bytes = (Object) dis.readObject();

					this.File_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.Bytes);

				// String

				writeString(this.File_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Bytes=" + String.valueOf(Bytes));
			sb.append(",File_Name=" + File_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TASK_04_Job_2 = new byte[0];
		static byte[] commonByteArray_TASK_04_Job_2 = new byte[0];

		public Object Bytes;

		public Object getBytes() {
			return this.Bytes;
		}

		public String File_Name;

		public String getFile_Name() {
			return this.File_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_04_Job_2.length) {
					if (length < 1024
							&& commonByteArray_TASK_04_Job_2.length == 0) {
						commonByteArray_TASK_04_Job_2 = new byte[1024];
					} else {
						commonByteArray_TASK_04_Job_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_04_Job_2, 0, length);
				strReturn = new String(commonByteArray_TASK_04_Job_2, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_04_Job_2) {

				try {

					int length = 0;

					this.Bytes = (Object) dis.readObject();

					this.File_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.Bytes);

				// String

				writeString(this.File_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Bytes=" + String.valueOf(Bytes));
			sb.append(",File_Name=" + File_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TASK_04_Job_2 = new byte[0];
		static byte[] commonByteArray_TASK_04_Job_2 = new byte[0];

		public Object content;

		public Object getContent() {
			return this.content;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_04_Job_2) {

				try {

					int length = 0;

					this.content = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.content);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + String.valueOf(content));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputRaw_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row2 = out1;

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				class BytesLimit65535_tDBOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBOutput_1().limitLog4jByte();

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap
						.get("dbschema_tDBConnection_1");
				conn_tDBOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("encoded");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "."
							+ ("encoded");
				}
				String tableNameForSearch_tDBOutput_1 = ""
						+ ((String) "encoded") + "";
				String dbschemaForSearch_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_1 = ((String) globalMap
							.get("username_tDBConnection_1")).toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1
							.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1
						.getMetaData();
				if (tableNameForSearch_tDBOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1
							.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1
							.replaceAll("\"", "");
				}
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1
						.getTables(null, dbschemaForSearch_tDBOutput_1,
								tableNameForSearch_tDBOutput_1,
								new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				if (rsTable_tDBOutput_1.next()) {
					whetherExist_tDBOutput_1 = true;
				}
				rsTable_tDBOutput_1.close();

				if (whetherExist_tDBOutput_1) {
					java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1
							.createStatement();
					stmtDrop_tDBOutput_1.execute("DROP TABLE "
							+ tableName_tDBOutput_1 + "");
					stmtDrop_tDBOutput_1.close();
				}
				java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1
						.createStatement();
				stmtCreate_tDBOutput_1.execute("CREATE TABLE "
						+ tableName_tDBOutput_1
						+ "(Bytes LONG ,File_Name VARCHAR2(100)  )");
				stmtCreate_tDBOutput_1.close();
				String insert_tDBOutput_1 = "INSERT INTO "
						+ tableName_tDBOutput_1
						+ " (Bytes,File_Name) VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth,
							int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_1";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null
									&& row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 9;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth
								- title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "Bytes");
						for (int i = 0; i < titleWidth - "Bytes".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null
								&& i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "File_Name");
						for (int i = 0; i < titleWidth - "File_Name".length()
								+ 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null
								&& i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputRaw_1 begin ] start
				 */

				ok_Hash.put("tFileInputRaw_1", false);
				start_Hash.put("tFileInputRaw_1", System.currentTimeMillis());

				currentComponent = "tFileInputRaw_1";

				int tos_count_tFileInputRaw_1 = 0;

				class BytesLimit65535_tFileInputRaw_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputRaw_1().limitLog4jByte();

				try {
					String content_tFileInputRaw_1 = org.apache.commons.io.FileUtils
							.readFileToString(new java.io.File(
									"D:/talend/Topic 01/input/customers.csv"),
									"ISO-8859-15");
					row1.content = content_tFileInputRaw_1;
					globalMap.put("tFileInputRaw_1_FILENAME_PATH",
							"D:/talend/Topic 01/input/customers.csv");
				} catch (java.io.IOException e_tFileInputRaw_1) {

					System.err.println(e_tFileInputRaw_1);
				}

				/**
				 * [tFileInputRaw_1 begin ] stop
				 */

				/**
				 * [tFileInputRaw_1 main ] start
				 */

				currentComponent = "tFileInputRaw_1";

				tos_count_tFileInputRaw_1++;

				/**
				 * [tFileInputRaw_1 main ] stop
				 */

				/**
				 * [tFileInputRaw_1 process_data_begin ] start
				 */

				currentComponent = "tFileInputRaw_1";

				/**
				 * [tFileInputRaw_1 process_data_begin ] stop
				 */

				/**
				 * [tMap_1 main ] start
				 */

				currentComponent = "tMap_1";

				// row1
				// row1

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
				}

				boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_1 = false;
				boolean mainRowRejected_tMap_1 = false;

				// ###############################
				{ // start of Var scope

					// ###############################
					// # Vars tables

					Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
					// ###############################
					// # Output tables

					out1 = null;

					// # Output table : 'out1'
					out1_tmp.Bytes = ConvertToBase64.Convert(row1.content);
					out1_tmp.File_Name = ParseFilePath
							.getFileName(((String) globalMap
									.get("tFileInputRaw_1_FILENAME_PATH")));
					out1 = out1_tmp;
					// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_1 = false;

				tos_count_tMap_1++;

				/**
				 * [tMap_1 main ] stop
				 */

				/**
				 * [tMap_1 process_data_begin ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 process_data_begin ] stop
				 */
				// Start of branch "out1"
				if (out1 != null) {

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// out1
					// out1

					if (execStat) {
						runStat.updateStatOnConnection("out1" + iterateId, 1, 1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (out1.Bytes != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(out1.Bytes));

					} //

					strBuffer_tLogRow_1.append("|");

					if (out1.File_Name != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(out1.File_Name));

					} //

					String[] row_tLogRow_1 = new String[2];

					if (out1.Bytes != null) { //
						row_tLogRow_1[0] = String.valueOf(out1.Bytes);

					} //

					if (out1.File_Name != null) { //
						row_tLogRow_1[1] = String.valueOf(out1.File_Name);

					} //

					nb_line_tLogRow_1++;
					consoleOut_tLogRow_1.println(util_tLogRow_1.print(
							row_tLogRow_1, nb_line_tLogRow_1));
					consoleOut_tLogRow_1.flush();
					// ////

					// ////

					// /////////////////////

					row2 = out1;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 main ] start
					 */

					currentComponent = "tDBOutput_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					whetherReject_tDBOutput_1 = false;
					if (row2.Bytes == null) {
						pstmt_tDBOutput_1.setNull(1, java.sql.Types.OTHER);
					} else {
						pstmt_tDBOutput_1.setObject(1, row2.Bytes);
					}

					if (row2.File_Name == null) {
						pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tDBOutput_1.setString(2, row2.File_Name);
					}

					try {
						nb_line_tDBOutput_1++;
						insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
								+ pstmt_tDBOutput_1.executeUpdate();
					} catch (java.lang.Exception e_tDBOutput_1) {
						whetherReject_tDBOutput_1 = true;
						System.err.print(e_tDBOutput_1.getMessage());
					}

					tos_count_tDBOutput_1++;

					/**
					 * [tDBOutput_1 main ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_begin ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tDBOutput_1 process_data_end ] start
					 */

					currentComponent = "tDBOutput_1";

					/**
					 * [tDBOutput_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

				} // End of branch "out1"

				/**
				 * [tMap_1 process_data_end ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 process_data_end ] stop
				 */

				/**
				 * [tFileInputRaw_1 process_data_end ] start
				 */

				currentComponent = "tFileInputRaw_1";

				/**
				 * [tFileInputRaw_1 process_data_end ] stop
				 */

				/**
				 * [tFileInputRaw_1 end ] start
				 */

				currentComponent = "tFileInputRaw_1";

				ok_Hash.put("tFileInputRaw_1", true);
				end_Hash.put("tFileInputRaw_1", System.currentTimeMillis());

				/**
				 * [tFileInputRaw_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();

				}

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputRaw_1 finally ] start
				 */

				currentComponent = "tFileInputRaw_1";

				/**
				 * [tFileInputRaw_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				class BytesLimit65535_tDBCommit_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBCommit_1().limitLog4jByte();

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				class BytesLimit65535_tDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_1().limitLog4jByte();

				String url_tDBConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ context.talend_Server
						+ ")(port="
						+ context.talend_Port
						+ "))(connect_data=(service_name="
						+ context.talend_ServiceName + ")))";
				globalMap.put("connectionType_" + "tDBConnection_1",
						"ORACLE_SERVICE_NAME");

				String dbUser_tDBConnection_1 = context.talend_Login;

				final String decryptedPassword_tDBConnection_1 = context.talend_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				java.util.Properties atnParamsPrope_tDBConnection_1 = new java.util.Properties();
				atnParamsPrope_tDBConnection_1.put("user",
						dbUser_tDBConnection_1);
				atnParamsPrope_tDBConnection_1.put("password",
						dbPwd_tDBConnection_1);
				if (context.talend_AdditionalParams != null
						&& !"\"\"".equals(context.talend_AdditionalParams)
						&& !"".equals(context.talend_AdditionalParams)) {
					atnParamsPrope_tDBConnection_1
							.load(new java.io.ByteArrayInputStream(
									context.talend_AdditionalParams.replace(
											"&", "\n").getBytes()));
				}

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, atnParamsPrope_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_1",
						context.talend_Server);
				globalMap.put("port_" + "tDBConnection_1", context.talend_Port);
				globalMap.put("dbname_" + "tDBConnection_1",
						context.talend_ServiceName);

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);
				globalMap.put("dbschema_" + "tDBConnection_1",
						context.talend_Schema);
				globalMap.put("username_" + "tDBConnection_1",
						context.talend_Login);
				globalMap.put("password_" + "tDBConnection_1",
						dbPwd_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Job_2 Job_2Class = new Job_2();

		int exitCode = Job_2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Job_2.class.getClassLoader()
					.getResourceAsStream(
							"task_04/job_2_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = Job_2.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("talend_AdditionalParams", "id_String");

			context.talend_AdditionalParams = (String) context
					.getProperty("talend_AdditionalParams");
			context.setContextType("talend_Server", "id_String");

			context.talend_Server = (String) context
					.getProperty("talend_Server");
			context.setContextType("talend_ServiceName", "id_String");

			context.talend_ServiceName = (String) context
					.getProperty("talend_ServiceName");
			context.setContextType("talend_Schema", "id_String");

			context.talend_Schema = (String) context
					.getProperty("talend_Schema");
			context.setContextType("talend_Login", "id_String");

			context.talend_Login = (String) context.getProperty("talend_Login");
			context.setContextType("talend_Port", "id_String");

			context.talend_Port = (String) context.getProperty("talend_Port");
			context.setContextType("talend_Password", "id_Password");

			String pwd_talend_Password_value = context
					.getProperty("talend_Password");
			context.talend_Password = null;
			if (pwd_talend_Password_value != null) {
				if (context_param.containsKey("talend_Password")) {// no need to
																	// decrypt
																	// if it
																	// come from
																	// program
																	// argument
																	// or parent
																	// job
																	// runtime
					context.talend_Password = pwd_talend_Password_value;
				} else if (!pwd_talend_Password_value.isEmpty()) {
					try {
						context.talend_Password = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_talend_Password_value);
						context.put("talend_Password", context.talend_Password);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("talend_AdditionalParams")) {
				context.talend_AdditionalParams = (String) parentContextMap
						.get("talend_AdditionalParams");
			}
			if (parentContextMap.containsKey("talend_Server")) {
				context.talend_Server = (String) parentContextMap
						.get("talend_Server");
			}
			if (parentContextMap.containsKey("talend_ServiceName")) {
				context.talend_ServiceName = (String) parentContextMap
						.get("talend_ServiceName");
			}
			if (parentContextMap.containsKey("talend_Schema")) {
				context.talend_Schema = (String) parentContextMap
						.get("talend_Schema");
			}
			if (parentContextMap.containsKey("talend_Login")) {
				context.talend_Login = (String) parentContextMap
						.get("talend_Login");
			}
			if (parentContextMap.containsKey("talend_Port")) {
				context.talend_Port = (String) parentContextMap
						.get("talend_Port");
			}
			if (parentContextMap.containsKey("talend_Password")) {
				context.talend_Password = (java.lang.String) parentContextMap
						.get("talend_Password");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("talend_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputRaw_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputRaw_1) {
			globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", -1);

			e_tFileInputRaw_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Job_2");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 73896 characters generated by Talend Open Studio for Data Integration on the
 * May 12, 2018 9:32:09 PM MSK
 ************************************************************************************************/
