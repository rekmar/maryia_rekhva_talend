// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package exit.create_dim_tables_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: create_dim_tables Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class create_dim_tables implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(TALEND_AdditionalParams != null){
				
					this.setProperty("TALEND_AdditionalParams", TALEND_AdditionalParams.toString());
				
			}
			
			if(TALEND_Login != null){
				
					this.setProperty("TALEND_Login", TALEND_Login.toString());
				
			}
			
			if(TALEND_Password != null){
				
					this.setProperty("TALEND_Password", TALEND_Password.toString());
				
			}
			
			if(TALEND_Port != null){
				
					this.setProperty("TALEND_Port", TALEND_Port.toString());
				
			}
			
			if(TALEND_Schema != null){
				
					this.setProperty("TALEND_Schema", TALEND_Schema.toString());
				
			}
			
			if(TALEND_Server != null){
				
					this.setProperty("TALEND_Server", TALEND_Server.toString());
				
			}
			
			if(TALEND_ServiceName != null){
				
					this.setProperty("TALEND_ServiceName", TALEND_ServiceName.toString());
				
			}
			
		}

public String TALEND_AdditionalParams;
public String getTALEND_AdditionalParams(){
	return this.TALEND_AdditionalParams;
}
public String TALEND_Login;
public String getTALEND_Login(){
	return this.TALEND_Login;
}
public java.lang.String TALEND_Password;
public java.lang.String getTALEND_Password(){
	return this.TALEND_Password;
}
public String TALEND_Port;
public String getTALEND_Port(){
	return this.TALEND_Port;
}
public String TALEND_Schema;
public String getTALEND_Schema(){
	return this.TALEND_Schema;
}
public String TALEND_Server;
public String getTALEND_Server(){
	return this.TALEND_Server;
}
public String TALEND_ServiceName;
public String getTALEND_ServiceName(){
	return this.TALEND_ServiceName;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "create_dim_tables";
	private final String projectName = "EXIT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				create_dim_tables.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(create_dim_tables.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tCreateTable_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tCreateTable_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tCreateTable_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tCreateTable_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tCreateTable_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_1", false);
		start_Hash.put("tCreateTable_1", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_1";

	
		int tos_count_tCreateTable_1 = 0;
		
    	class BytesLimit65535_tCreateTable_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_1().limitLog4jByte();

 



/**
 * [tCreateTable_1 begin ] stop
 */
	
	/**
	 * [tCreateTable_1 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

    try{
        String tableName_tCreateTable_1 = "DIM_CUSTOMERS";
String dbSchema_tCreateTable_1 = (String)globalMap.get("dbschema_tDBConnection_3");
if(dbSchema_tCreateTable_1 != null && dbSchema_tCreateTable_1.trim().length() != 0) {tableName_tCreateTable_1 = dbSchema_tCreateTable_1 + "." + tableName_tCreateTable_1;
}java.sql.Connection conn_tCreateTable_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
            boolean whetherExist_tCreateTable_1 = false;
				String tableNameForSearch_tCreateTable_1= "" + ((String)"DIM_CUSTOMERS") + "";
String dbschemaForSearch_tCreateTable_1= null;
if(dbSchema_tCreateTable_1== null || dbSchema_tCreateTable_1.trim().length() == 0) {
dbschemaForSearch_tCreateTable_1= null;
} else {
dbschemaForSearch_tCreateTable_1= dbSchema_tCreateTable_1.toUpperCase();
}

	            java.sql.DatabaseMetaData dbMetaData_tCreateTable_1 = conn_tCreateTable_1.getMetaData();
	            if(tableNameForSearch_tCreateTable_1.indexOf("\"")==-1){
            		tableNameForSearch_tCreateTable_1 = tableNameForSearch_tCreateTable_1.toUpperCase();
            	}else{
            		tableNameForSearch_tCreateTable_1 = tableNameForSearch_tCreateTable_1.replaceAll("\"","");
            	}
	            java.sql.ResultSet rsTable_tCreateTable_1 = dbMetaData_tCreateTable_1.getTables(null, dbschemaForSearch_tCreateTable_1, tableNameForSearch_tCreateTable_1, new String[]{"TABLE"});
	            if(rsTable_tCreateTable_1.next()) {
	            	whetherExist_tCreateTable_1 = true;
	            }     
            rsTable_tCreateTable_1.close();
                if(whetherExist_tCreateTable_1) {
                    java.sql.Statement stmtDrop_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                    stmtDrop_tCreateTable_1.execute("DROP TABLE " + tableName_tCreateTable_1 + "");
                }
                java.sql.Statement stmt_tCreateTable_1 = conn_tCreateTable_1.createStatement();
                stmt_tCreateTable_1.execute("CREATE TABLE " + tableName_tCreateTable_1 + "(surr_id NUMBER(38,0)  ,ID NUMBER(38,0)   not null ,NAME VARCHAR2(20)  ,USERNAME VARCHAR2(20)  ,EMAIL VARCHAR2(40)  ,DATEOFBIRTH DATE ,STREETADDRESS VARCHAR2(50)  ,CITY VARCHAR2(20)  ,COUNTRY VARCHAR2(13)  ,ZIP VARCHAR2(6)  ,STATE VARCHAR2(2)  ,PHONE VARCHAR2(14)  ,primary key(surr_id))"); 
	            
        
        globalMap.put("tCreateTable_1_QUERY", "CREATE TABLE " + tableName_tCreateTable_1 + "(surr_id NUMBER(38,0)  ,ID NUMBER(38,0)   not null ,NAME VARCHAR2(20)  ,USERNAME VARCHAR2(20)  ,EMAIL VARCHAR2(40)  ,DATEOFBIRTH DATE ,STREETADDRESS VARCHAR2(50)  ,CITY VARCHAR2(20)  ,COUNTRY VARCHAR2(13)  ,ZIP VARCHAR2(6)  ,STATE VARCHAR2(2)  ,PHONE VARCHAR2(14)  ,primary key(surr_id))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_1_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_1++;

/**
 * [tCreateTable_1 main ] stop
 */
	
	/**
	 * [tCreateTable_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 



/**
 * [tCreateTable_1 process_data_begin ] stop
 */
	
	/**
	 * [tCreateTable_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 



/**
 * [tCreateTable_1 process_data_end ] stop
 */
	
	/**
	 * [tCreateTable_1 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 

ok_Hash.put("tCreateTable_1", true);
end_Hash.put("tCreateTable_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tCreateTable_2Process(globalMap);



/**
 * [tCreateTable_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_1 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_1";

	

 



/**
 * [tCreateTable_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_1_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tCreateTable_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_2", false);
		start_Hash.put("tCreateTable_2", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_2";

	
		int tos_count_tCreateTable_2 = 0;
		
    	class BytesLimit65535_tCreateTable_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_2().limitLog4jByte();

 



/**
 * [tCreateTable_2 begin ] stop
 */
	
	/**
	 * [tCreateTable_2 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

    try{
        String tableName_tCreateTable_2 = "DIM_PRODUCTS";
String dbSchema_tCreateTable_2 = (String)globalMap.get("dbschema_tDBConnection_3");
if(dbSchema_tCreateTable_2 != null && dbSchema_tCreateTable_2.trim().length() != 0) {tableName_tCreateTable_2 = dbSchema_tCreateTable_2 + "." + tableName_tCreateTable_2;
}java.sql.Connection conn_tCreateTable_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
            boolean whetherExist_tCreateTable_2 = false;
				String tableNameForSearch_tCreateTable_2= "" + ((String)"DIM_PRODUCTS") + "";
String dbschemaForSearch_tCreateTable_2= null;
if(dbSchema_tCreateTable_2== null || dbSchema_tCreateTable_2.trim().length() == 0) {
dbschemaForSearch_tCreateTable_2= null;
} else {
dbschemaForSearch_tCreateTable_2= dbSchema_tCreateTable_2.toUpperCase();
}

	            java.sql.DatabaseMetaData dbMetaData_tCreateTable_2 = conn_tCreateTable_2.getMetaData();
	            if(tableNameForSearch_tCreateTable_2.indexOf("\"")==-1){
            		tableNameForSearch_tCreateTable_2 = tableNameForSearch_tCreateTable_2.toUpperCase();
            	}else{
            		tableNameForSearch_tCreateTable_2 = tableNameForSearch_tCreateTable_2.replaceAll("\"","");
            	}
	            java.sql.ResultSet rsTable_tCreateTable_2 = dbMetaData_tCreateTable_2.getTables(null, dbschemaForSearch_tCreateTable_2, tableNameForSearch_tCreateTable_2, new String[]{"TABLE"});
	            if(rsTable_tCreateTable_2.next()) {
	            	whetherExist_tCreateTable_2 = true;
	            }     
            rsTable_tCreateTable_2.close();
                if(whetherExist_tCreateTable_2) {
                    java.sql.Statement stmtDrop_tCreateTable_2 = conn_tCreateTable_2.createStatement();
                    stmtDrop_tCreateTable_2.execute("DROP TABLE " + tableName_tCreateTable_2 + "");
                }
                java.sql.Statement stmt_tCreateTable_2 = conn_tCreateTable_2.createStatement();
                stmt_tCreateTable_2.execute("CREATE TABLE " + tableName_tCreateTable_2 + "(surr_id NUMBER(38,0)   not null ,PRODUCTS NUMBER(38,0)  ,PRODUCTNAME VARCHAR2(150)  ,COMPANYNAME VARCHAR2(45)  ,PRICE VARCHAR2(6)  ,WarehouseLocationState VARCHAR2(10)  ,primary key(surr_id))"); 
	            
        
        globalMap.put("tCreateTable_2_QUERY", "CREATE TABLE " + tableName_tCreateTable_2 + "(surr_id NUMBER(38,0)   not null ,PRODUCTS NUMBER(38,0)  ,PRODUCTNAME VARCHAR2(150)  ,COMPANYNAME VARCHAR2(45)  ,PRICE VARCHAR2(6)  ,WarehouseLocationState VARCHAR2(10)  ,primary key(surr_id))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_2_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_2++;

/**
 * [tCreateTable_2 main ] stop
 */
	
	/**
	 * [tCreateTable_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 process_data_begin ] stop
 */
	
	/**
	 * [tCreateTable_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 process_data_end ] stop
 */
	
	/**
	 * [tCreateTable_2 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 

ok_Hash.put("tCreateTable_2", true);
end_Hash.put("tCreateTable_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tCreateTable_3Process(globalMap);



/**
 * [tCreateTable_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_2 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_2";

	

 



/**
 * [tCreateTable_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_2_SUBPROCESS_STATE", 1);
	}
	

public void tCreateTable_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tCreateTable_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tCreateTable_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tCreateTable_3", false);
		start_Hash.put("tCreateTable_3", System.currentTimeMillis());
		
	
	currentComponent="tCreateTable_3";

	
		int tos_count_tCreateTable_3 = 0;
		
    	class BytesLimit65535_tCreateTable_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tCreateTable_3().limitLog4jByte();

 



/**
 * [tCreateTable_3 begin ] stop
 */
	
	/**
	 * [tCreateTable_3 main ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

    try{
        String tableName_tCreateTable_3 = "FCT_PURCHASES";
String dbSchema_tCreateTable_3 = (String)globalMap.get("dbschema_tDBConnection_3");
if(dbSchema_tCreateTable_3 != null && dbSchema_tCreateTable_3.trim().length() != 0) {tableName_tCreateTable_3 = dbSchema_tCreateTable_3 + "." + tableName_tCreateTable_3;
}java.sql.Connection conn_tCreateTable_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
            boolean whetherExist_tCreateTable_3 = false;
				String tableNameForSearch_tCreateTable_3= "" + ((String)"FCT_PURCHASES") + "";
String dbschemaForSearch_tCreateTable_3= null;
if(dbSchema_tCreateTable_3== null || dbSchema_tCreateTable_3.trim().length() == 0) {
dbschemaForSearch_tCreateTable_3= null;
} else {
dbschemaForSearch_tCreateTable_3= dbSchema_tCreateTable_3.toUpperCase();
}

	            java.sql.DatabaseMetaData dbMetaData_tCreateTable_3 = conn_tCreateTable_3.getMetaData();
	            if(tableNameForSearch_tCreateTable_3.indexOf("\"")==-1){
            		tableNameForSearch_tCreateTable_3 = tableNameForSearch_tCreateTable_3.toUpperCase();
            	}else{
            		tableNameForSearch_tCreateTable_3 = tableNameForSearch_tCreateTable_3.replaceAll("\"","");
            	}
	            java.sql.ResultSet rsTable_tCreateTable_3 = dbMetaData_tCreateTable_3.getTables(null, dbschemaForSearch_tCreateTable_3, tableNameForSearch_tCreateTable_3, new String[]{"TABLE"});
	            if(rsTable_tCreateTable_3.next()) {
	            	whetherExist_tCreateTable_3 = true;
	            }     
            rsTable_tCreateTable_3.close();
                if(whetherExist_tCreateTable_3) {
                    java.sql.Statement stmtDrop_tCreateTable_3 = conn_tCreateTable_3.createStatement();
                    stmtDrop_tCreateTable_3.execute("DROP TABLE " + tableName_tCreateTable_3 + "");
                }
                java.sql.Statement stmt_tCreateTable_3 = conn_tCreateTable_3.createStatement();
                stmt_tCreateTable_3.execute("CREATE TABLE " + tableName_tCreateTable_3 + "(surr_id NUMBER(38,0)  ,CUSTOMERID NUMBER(38,0)  ,PRODUCTID NUMBER(38,0)  ,TRANSACTIONDATE DATE ,CREDITCARD VARCHAR2(12)  ,CREDITCARDNUMBER VARCHAR2(19)  ,isInterState VARCHAR2(2)  ,primary key(surr_id))"); 
	            
        
        globalMap.put("tCreateTable_3_QUERY", "CREATE TABLE " + tableName_tCreateTable_3 + "(surr_id NUMBER(38,0)  ,CUSTOMERID NUMBER(38,0)  ,PRODUCTID NUMBER(38,0)  ,TRANSACTIONDATE DATE ,CREDITCARD VARCHAR2(12)  ,CREDITCARDNUMBER VARCHAR2(19)  ,isInterState VARCHAR2(2)  ,primary key(surr_id))");        
    } catch(java.lang.Exception e) {
        globalMap.put("tCreateTable_3_ERROR_MESSAGE",e.getMessage());
        throw new RuntimeException("Creating table failed", e);
    }


 


	tos_count_tCreateTable_3++;

/**
 * [tCreateTable_3 main ] stop
 */
	
	/**
	 * [tCreateTable_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

 



/**
 * [tCreateTable_3 process_data_begin ] stop
 */
	
	/**
	 * [tCreateTable_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

 



/**
 * [tCreateTable_3 process_data_end ] stop
 */
	
	/**
	 * [tCreateTable_3 end ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

 

ok_Hash.put("tCreateTable_3", true);
end_Hash.put("tCreateTable_3", System.currentTimeMillis());




/**
 * [tCreateTable_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tCreateTable_3 finally ] start
	 */

	

	
	
	currentComponent="tCreateTable_3";

	

 



/**
 * [tCreateTable_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tCreateTable_3_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_3Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";

	
		int tos_count_tDBConnection_3 = 0;
		
    	class BytesLimit65535_tDBConnection_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBConnection_3().limitLog4jByte();
	

	
        String url_tDBConnection_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.TALEND_Server + ")(port=" + context.TALEND_Port + "))(connect_data=(service_name=" + context.TALEND_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tDBConnection_3", "ORACLE_SERVICE_NAME");

	String dbUser_tDBConnection_3 = context.TALEND_Login;
	
	
		
	final String decryptedPassword_tDBConnection_3 = context.TALEND_Password; 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	

	java.sql.Connection conn_tDBConnection_3 = null;
	
		
			String driverClass_tDBConnection_3 = "oracle.jdbc.OracleDriver";
			java.lang.Class.forName(driverClass_tDBConnection_3);
		
			java.util.Properties atnParamsPrope_tDBConnection_3 = new java.util.Properties();
			    atnParamsPrope_tDBConnection_3.put("user",dbUser_tDBConnection_3);
			    atnParamsPrope_tDBConnection_3.put("password",dbPwd_tDBConnection_3);
			if(context.TALEND_AdditionalParams != null && !"\"\"".equals(context.TALEND_AdditionalParams) && !"".equals(context.TALEND_AdditionalParams)){
                atnParamsPrope_tDBConnection_3.load(new java.io.ByteArrayInputStream(context.TALEND_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3, atnParamsPrope_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(false);
	}
        globalMap.put("host_" + "tDBConnection_3",context.TALEND_Server);
        globalMap.put("port_" + "tDBConnection_3",context.TALEND_Port);
        globalMap.put("dbname_" + "tDBConnection_3",context.TALEND_ServiceName);

	globalMap.put("conn_" + "tDBConnection_3",conn_tDBConnection_3);
	globalMap.put("dbschema_" + "tDBConnection_3", context.TALEND_Schema);
	globalMap.put("username_" + "tDBConnection_3",context.TALEND_Login);
	globalMap.put("password_" + "tDBConnection_3",dbPwd_tDBConnection_3);

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";

	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final create_dim_tables create_dim_tablesClass = new create_dim_tables();

        int exitCode = create_dim_tablesClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = create_dim_tables.class.getClassLoader().getResourceAsStream("exit/create_dim_tables_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = create_dim_tables.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("TALEND_AdditionalParams", "id_String");
				
                context.TALEND_AdditionalParams=(String) context.getProperty("TALEND_AdditionalParams");
				    context.setContextType("TALEND_Login", "id_String");
				
                context.TALEND_Login=(String) context.getProperty("TALEND_Login");
				    context.setContextType("TALEND_Password", "id_Password");
				
            		String pwd_TALEND_Password_value = context.getProperty("TALEND_Password");
            		context.TALEND_Password = null;
            		if(pwd_TALEND_Password_value!=null) {
            			if(context_param.containsKey("TALEND_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.TALEND_Password = pwd_TALEND_Password_value;
            			} else if (!pwd_TALEND_Password_value.isEmpty()) {
            				try {
            					context.TALEND_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_TALEND_Password_value);
            					context.put("TALEND_Password",context.TALEND_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("TALEND_Port", "id_String");
				
                context.TALEND_Port=(String) context.getProperty("TALEND_Port");
				    context.setContextType("TALEND_Schema", "id_String");
				
                context.TALEND_Schema=(String) context.getProperty("TALEND_Schema");
				    context.setContextType("TALEND_Server", "id_String");
				
                context.TALEND_Server=(String) context.getProperty("TALEND_Server");
				    context.setContextType("TALEND_ServiceName", "id_String");
				
                context.TALEND_ServiceName=(String) context.getProperty("TALEND_ServiceName");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("TALEND_AdditionalParams")) {
                context.TALEND_AdditionalParams = (String) parentContextMap.get("TALEND_AdditionalParams");
            }if (parentContextMap.containsKey("TALEND_Login")) {
                context.TALEND_Login = (String) parentContextMap.get("TALEND_Login");
            }if (parentContextMap.containsKey("TALEND_Password")) {
                context.TALEND_Password = (java.lang.String) parentContextMap.get("TALEND_Password");
            }if (parentContextMap.containsKey("TALEND_Port")) {
                context.TALEND_Port = (String) parentContextMap.get("TALEND_Port");
            }if (parentContextMap.containsKey("TALEND_Schema")) {
                context.TALEND_Schema = (String) parentContextMap.get("TALEND_Schema");
            }if (parentContextMap.containsKey("TALEND_Server")) {
                context.TALEND_Server = (String) parentContextMap.get("TALEND_Server");
            }if (parentContextMap.containsKey("TALEND_ServiceName")) {
                context.TALEND_ServiceName = (String) parentContextMap.get("TALEND_ServiceName");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("TALEND_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tCreateTable_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tCreateTable_1) {
globalMap.put("tCreateTable_1_SUBPROCESS_STATE", -1);

e_tCreateTable_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : create_dim_tables");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     54481 characters generated by Talend Open Studio for Data Integration 
 *     on the May 14, 2018 9:17:22 PM MSK
 ************************************************************************************************/