// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package task_02.elt_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
import java.io.IOException;
import java.nio.file.*;
import java.lang.String;

@SuppressWarnings("unused")
/**
 * Job: elt Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class elt implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "elt";
	private final String projectName = "TASK_02";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					elt.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(elt.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractDelimitedFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_provinces_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_discounts_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				class BytesLimit65535_tDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_1().limitLog4jByte();

				String url_tDBConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "192.168.56.1"
						+ ")(port="
						+ "1521"
						+ "))(connect_data=(service_name=" + "orcl" + ")))";
				globalMap.put("connectionType_" + "tDBConnection_1",
						"ORACLE_SERVICE_NAME");

				String dbUser_tDBConnection_1 = "test_user";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("8e8492d115471f8cf2e60757bd765168");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_1", "192.168.56.1");
				globalMap.put("port_" + "tDBConnection_1", "1521");
				globalMap.put("dbname_" + "tDBConnection_1", "orcl");

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);
				globalMap.put("dbschema_" + "tDBConnection_1", "TEST_USER");
				globalMap.put("username_" + "tDBConnection_1", "test_user");
				globalMap.put("password_" + "tDBConnection_1",
						dbPwd_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				class BytesLimit65535_tJava_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_1().limitLog4jByte();

				String[] file_paths = {
						"D:\\maryia_rekhva\\git\\maryia_rekhva_talend\\task_02\\Orders.csv",
						"D:\\maryia_rekhva\\git\\maryia_rekhva_talend\\task_02\\Revenue.xls" };
				try {

					for (int i = 0; i < file_paths.length; i++) {

						Files.deleteIfExists(Paths.get(file_paths[i]));
					}
				} catch (NoSuchFileException e) {
					System.out.println("No such file/directory exists");
				}
				;

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String SUBREGION;

		public String getSUBREGION() {
			return this.SUBREGION;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.REGION = readString(dis);

					this.SUBREGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.SUBREGION, dos);

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + REGION);
			sb.append(",SUBREGION=" + SUBREGION);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String SUBREGION;

		public String getSUBREGION() {
			return this.SUBREGION;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.REGION = readString(dis);

					this.SUBREGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.SUBREGION, dos);

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + REGION);
			sb.append(",SUBREGION=" + SUBREGION);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.REGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REGION, dos);

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + REGION);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.REGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REGION, dos);

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + REGION);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ACCOUNT_KEY;

		public BigDecimal getACCOUNT_KEY() {
			return this.ACCOUNT_KEY;
		}

		public BigDecimal COUNTRY_KEY;

		public BigDecimal getCOUNTRY_KEY() {
			return this.COUNTRY_KEY;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String SUBREGION;

		public String getSUBREGION() {
			return this.SUBREGION;
		}

		public Float PAYMENT;

		public Float getPAYMENT() {
			return this.PAYMENT;
		}

		public Float DISCOUNT;

		public Float getDISCOUNT() {
			return this.DISCOUNT;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ACCOUNT_KEY == null) ? 0 : this.ACCOUNT_KEY
								.hashCode());

				result = prime
						* result
						+ ((this.COUNTRY_KEY == null) ? 0 : this.COUNTRY_KEY
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ACCOUNT_KEY == null) {
				if (other.ACCOUNT_KEY != null)
					return false;

			} else if (!this.ACCOUNT_KEY.equals(other.ACCOUNT_KEY))

				return false;

			if (this.COUNTRY_KEY == null) {
				if (other.COUNTRY_KEY != null)
					return false;

			} else if (!this.COUNTRY_KEY.equals(other.COUNTRY_KEY))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;
			other.COUNTRY_KEY = this.COUNTRY_KEY;
			other.REGION = this.REGION;
			other.SUBREGION = this.SUBREGION;
			other.PAYMENT = this.PAYMENT;
			other.DISCOUNT = this.DISCOUNT;
			other.PRICE = this.PRICE;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;
			other.COUNTRY_KEY = this.COUNTRY_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ACCOUNT_KEY = (BigDecimal) dis.readObject();

					this.COUNTRY_KEY = (BigDecimal) dis.readObject();

					this.REGION = readString(dis);

					this.SUBREGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PAYMENT = null;
					} else {
						this.PAYMENT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNT = null;
					} else {
						this.DISCOUNT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ACCOUNT_KEY);

				// BigDecimal

				dos.writeObject(this.COUNTRY_KEY);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.SUBREGION, dos);

				// Float

				if (this.PAYMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PAYMENT);
				}

				// Float

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNT);
				}

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ACCOUNT_KEY=" + String.valueOf(ACCOUNT_KEY));
			sb.append(",COUNTRY_KEY=" + String.valueOf(COUNTRY_KEY));
			sb.append(",REGION=" + REGION);
			sb.append(",SUBREGION=" + SUBREGION);
			sb.append(",PAYMENT=" + String.valueOf(PAYMENT));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ACCOUNT_KEY,
					other.ACCOUNT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.COUNTRY_KEY,
					other.COUNTRY_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class new_ordersStruct implements
			routines.system.IPersistableRow<new_ordersStruct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ACCOUNT_KEY;

		public BigDecimal getACCOUNT_KEY() {
			return this.ACCOUNT_KEY;
		}

		public BigDecimal COUNTRY_KEY;

		public BigDecimal getCOUNTRY_KEY() {
			return this.COUNTRY_KEY;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String SUBREGION;

		public String getSUBREGION() {
			return this.SUBREGION;
		}

		public Float PAYMENT;

		public Float getPAYMENT() {
			return this.PAYMENT;
		}

		public Float DISCOUNT;

		public Float getDISCOUNT() {
			return this.DISCOUNT;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ACCOUNT_KEY == null) ? 0 : this.ACCOUNT_KEY
								.hashCode());

				result = prime
						* result
						+ ((this.COUNTRY_KEY == null) ? 0 : this.COUNTRY_KEY
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final new_ordersStruct other = (new_ordersStruct) obj;

			if (this.ACCOUNT_KEY == null) {
				if (other.ACCOUNT_KEY != null)
					return false;

			} else if (!this.ACCOUNT_KEY.equals(other.ACCOUNT_KEY))

				return false;

			if (this.COUNTRY_KEY == null) {
				if (other.COUNTRY_KEY != null)
					return false;

			} else if (!this.COUNTRY_KEY.equals(other.COUNTRY_KEY))

				return false;

			return true;
		}

		public void copyDataTo(new_ordersStruct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;
			other.COUNTRY_KEY = this.COUNTRY_KEY;
			other.REGION = this.REGION;
			other.SUBREGION = this.SUBREGION;
			other.PAYMENT = this.PAYMENT;
			other.DISCOUNT = this.DISCOUNT;
			other.PRICE = this.PRICE;

		}

		public void copyKeysDataTo(new_ordersStruct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;
			other.COUNTRY_KEY = this.COUNTRY_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ACCOUNT_KEY = (BigDecimal) dis.readObject();

					this.COUNTRY_KEY = (BigDecimal) dis.readObject();

					this.REGION = readString(dis);

					this.SUBREGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PAYMENT = null;
					} else {
						this.PAYMENT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNT = null;
					} else {
						this.DISCOUNT = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ACCOUNT_KEY);

				// BigDecimal

				dos.writeObject(this.COUNTRY_KEY);

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.SUBREGION, dos);

				// Float

				if (this.PAYMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PAYMENT);
				}

				// Float

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNT);
				}

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ACCOUNT_KEY=" + String.valueOf(ACCOUNT_KEY));
			sb.append(",COUNTRY_KEY=" + String.valueOf(COUNTRY_KEY));
			sb.append(",REGION=" + REGION);
			sb.append(",SUBREGION=" + SUBREGION);
			sb.append(",PAYMENT=" + String.valueOf(PAYMENT));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_ordersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ACCOUNT_KEY,
					other.ACCOUNT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.COUNTRY_KEY,
					other.COUNTRY_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RevenueByRegionsStruct implements
			routines.system.IPersistableRow<RevenueByRegionsStruct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.REGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REGION, dos);

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + REGION);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RevenueByRegionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RevenueBySubregionsStruct implements
			routines.system.IPersistableRow<RevenueBySubregionsStruct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		public String SUBREGION;

		public String getSUBREGION() {
			return this.SUBREGION;
		}

		public Float PRICE;

		public Float getPRICE() {
			return this.PRICE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.REGION = readString(dis);

					this.SUBREGION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRICE = null;
					} else {
						this.PRICE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REGION, dos);

				// String

				writeString(this.SUBREGION, dos);

				// Float

				if (this.PRICE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRICE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION=" + REGION);
			sb.append(",SUBREGION=" + SUBREGION);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RevenueBySubregionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ordersStruct implements
			routines.system.IPersistableRow<ordersStruct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];

		public BigDecimal ACCOUNT_KEY;

		public BigDecimal getACCOUNT_KEY() {
			return this.ACCOUNT_KEY;
		}

		public Float PAYMENT;

		public Float getPAYMENT() {
			return this.PAYMENT;
		}

		public String COUNTRY;

		public String getCOUNTRY() {
			return this.COUNTRY;
		}

		public String SUBREGION;

		public String getSUBREGION() {
			return this.SUBREGION;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ACCOUNT_KEY = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.PAYMENT = null;
					} else {
						this.PAYMENT = dis.readFloat();
					}

					this.COUNTRY = readString(dis);

					this.SUBREGION = readString(dis);

					this.REGION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ACCOUNT_KEY);

				// Float

				if (this.PAYMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PAYMENT);
				}

				// String

				writeString(this.COUNTRY, dos);

				// String

				writeString(this.SUBREGION, dos);

				// String

				writeString(this.REGION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ACCOUNT_KEY=" + String.valueOf(ACCOUNT_KEY));
			sb.append(",PAYMENT=" + String.valueOf(PAYMENT));
			sb.append(",COUNTRY=" + COUNTRY);
			sb.append(",SUBREGION=" + SUBREGION);
			sb.append(",REGION=" + REGION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ordersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ACCOUNT_KEY;

		public BigDecimal getACCOUNT_KEY() {
			return this.ACCOUNT_KEY;
		}

		public String LOCATION;

		public String getLOCATION() {
			return this.LOCATION;
		}

		public Float PAYMENT;

		public Float getPAYMENT() {
			return this.PAYMENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ACCOUNT_KEY == null) ? 0 : this.ACCOUNT_KEY
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ACCOUNT_KEY == null) {
				if (other.ACCOUNT_KEY != null)
					return false;

			} else if (!this.ACCOUNT_KEY.equals(other.ACCOUNT_KEY))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;
			other.LOCATION = this.LOCATION;
			other.PAYMENT = this.PAYMENT;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ACCOUNT_KEY = (BigDecimal) dis.readObject();

					this.LOCATION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PAYMENT = null;
					} else {
						this.PAYMENT = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ACCOUNT_KEY);

				// String

				writeString(this.LOCATION, dos);

				// Float

				if (this.PAYMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PAYMENT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ACCOUNT_KEY=" + String.valueOf(ACCOUNT_KEY));
			sb.append(",LOCATION=" + LOCATION);
			sb.append(",PAYMENT=" + String.valueOf(PAYMENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ACCOUNT_KEY,
					other.ACCOUNT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements
			routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ACCOUNT_KEY;

		public BigDecimal getACCOUNT_KEY() {
			return this.ACCOUNT_KEY;
		}

		public String LOCATION;

		public String getLOCATION() {
			return this.LOCATION;
		}

		public Float PAYMENT;

		public Float getPAYMENT() {
			return this.PAYMENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ACCOUNT_KEY == null) ? 0 : this.ACCOUNT_KEY
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.ACCOUNT_KEY == null) {
				if (other.ACCOUNT_KEY != null)
					return false;

			} else if (!this.ACCOUNT_KEY.equals(other.ACCOUNT_KEY))

				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;
			other.LOCATION = this.LOCATION;
			other.PAYMENT = this.PAYMENT;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.ACCOUNT_KEY = this.ACCOUNT_KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ACCOUNT_KEY = (BigDecimal) dis.readObject();

					this.LOCATION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PAYMENT = null;
					} else {
						this.PAYMENT = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ACCOUNT_KEY);

				// String

				writeString(this.LOCATION, dos);

				// Float

				if (this.PAYMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PAYMENT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ACCOUNT_KEY=" + String.valueOf(ACCOUNT_KEY));
			sb.append(",LOCATION=" + LOCATION);
			sb.append(",PAYMENT=" + String.valueOf(PAYMENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ACCOUNT_KEY,
					other.ACCOUNT_KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				ordersStruct orders = new ordersStruct();
				new_ordersStruct new_orders = new new_ordersStruct();
				new_ordersStruct row2 = new_orders;
				RevenueByRegionsStruct RevenueByRegions = new RevenueByRegionsStruct();
				row5Struct row5 = new row5Struct();
				RevenueBySubregionsStruct RevenueBySubregions = new RevenueBySubregionsStruct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				class BytesLimit65535_tFileOutputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"D:/maryia_rekhva/git/maryia_rekhva_talend/task_02/Orders.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, true),
								"ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("ACCOUNT_KEY");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("COUNTRY_KEY");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("REGION");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SUBREGION");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("PAYMENT");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DISCOUNT");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("PRICE");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"new_orders" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("RevenueByRegions"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

				class BytesLimit65535_tAggregateRow_1_AGGOUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGOUT().limitLog4jByte();

				// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String REGION;
					BigDecimal PRICE_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.REGION == null) ? 0 : this.REGION
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.REGION == null) {
							if (other.REGION != null)
								return false;
						} else if (!this.REGION.equals(other.REGION))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("RevenueBySubregions"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

				class BytesLimit65535_tAggregateRow_2_AGGOUT {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_2_AGGOUT().limitLog4jByte();

				// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

				// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b,
							boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(b),
												"'double' or 'BigDecimal'",
												"'float/Float'"));
							}
						}

						if (checkTypeOverFlow
								&& ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(
									buildOverflowMessage(String.valueOf(a),
											String.valueOf(b),
											"'double' or 'BigDecimal'",
											"'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b,
							boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(
										buildPrecisionMessage(
												String.valueOf(a),
												String.valueOf(a),
												"'BigDecimal'",
												"'double/Double'"));
							}
						}

						if (checkTypeOverFlow
								&& (a + b > (double) Double.MAX_VALUE)
								|| (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(
									String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "Type overflow when adding "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes + " type in place of "
								+ originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b,
							String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value "
								+ b
								+ " to "
								+ a
								+ ", to resolve this problem, increase the precision by using "
								+ advicedTypes
								+ " type in place of "
								+ originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String REGION;
					String SUBREGION;
					BigDecimal PRICE_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.REGION == null) ? 0 : this.REGION
											.hashCode());

							result = prime
									* result
									+ ((this.SUBREGION == null) ? 0
											: this.SUBREGION.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.REGION == null) {
							if (other.REGION != null)
								return false;
						} else if (!this.REGION.equals(other.REGION))
							return false;

						if (this.SUBREGION == null) {
							if (other.SUBREGION != null)
								return false;
						} else if (!this.SUBREGION.equals(other.SUBREGION))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("orders" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<provincesStruct> tHash_Lookup_provinces = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<provincesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<provincesStruct>) globalMap
						.get("tHash_Lookup_provinces"));

				provincesStruct provincesHashKey = new provincesStruct();
				provincesStruct provincesDefault = new provincesStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<discountsStruct> tHash_Lookup_discounts = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<discountsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<discountsStruct>) globalMap
						.get("tHash_Lookup_discounts"));

				discountsStruct discountsHashKey = new discountsStruct();
				discountsStruct discountsDefault = new discountsStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				new_ordersStruct new_orders_tmp = new new_ordersStruct();
				RevenueByRegionsStruct RevenueByRegions_tmp = new RevenueByRegionsStruct();
				RevenueBySubregionsStruct RevenueBySubregions_tmp = new RevenueBySubregionsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tExtractDelimitedFields_1 begin ] start
				 */

				ok_Hash.put("tExtractDelimitedFields_1", false);
				start_Hash.put("tExtractDelimitedFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractDelimitedFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractDelimitedFields_1 = 0;

				class BytesLimit65535_tExtractDelimitedFields_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractDelimitedFields_1()
						.limitLog4jByte();

				int nb_line_tExtractDelimitedFields_1 = 0;

				/**
				 * [tExtractDelimitedFields_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				class BytesLimit65535_tDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_1().limitLog4jByte();

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				boolean isTimeZoneNull_tDBInput_1 = false;
				boolean isConnectionWrapped_tDBInput_1 = !(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_1
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_1 = null;
				if (isConnectionWrapped_tDBInput_1) {
					unwrappedOraConn_tDBInput_1 = conn_tDBInput_1
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_1 != null) {
						isTimeZoneNull_tDBInput_1 = (unwrappedOraConn_tDBInput_1
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_1 = (((oracle.jdbc.OracleConnection) conn_tDBInput_1)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_1) {
					java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_1.next()) {
						sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_1
							&& unwrappedOraConn_tDBInput_1 != null) {
						unwrappedOraConn_tDBInput_1
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_1)
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					}
				}

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  TEST_USER.ORDERS.ACCOUNT_KEY, \n  TEST_USER.ORDERS.LOCATION, \n  TEST_USER.ORDERS.PAYMENT\nFROM TEST_USER.ORDERS"
						+ "";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ACCOUNT_KEY = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.ACCOUNT_KEY = rs_tDBInput_1
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.LOCATION = null;
						} else {

							row1.LOCATION = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.PAYMENT = null;
						} else {

							if (rs_tDBInput_1.getObject(3) != null) {
								row1.PAYMENT = rs_tDBInput_1.getFloat(3);
							} else {

								row1.PAYMENT = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tExtractDelimitedFields_1 main ] start
						 */

						currentComponent = "tExtractDelimitedFields_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						orders = null;

						orders = new ordersStruct();
						String field_tExtractDelimitedFields_1 = row1.LOCATION;
						String[] newFields_tExtractDelimitedFields_1 = new String[0];
						if (field_tExtractDelimitedFields_1 != null) {// C_01
							try {
								newFields_tExtractDelimitedFields_1 = field_tExtractDelimitedFields_1
										.split("->", -1);
								int length_tExtractDelimitedFields_1 = newFields_tExtractDelimitedFields_1.length;
								for (int i_tExtractDelimitedFields_1 = 0; i_tExtractDelimitedFields_1 < length_tExtractDelimitedFields_1; i_tExtractDelimitedFields_1++) {
									newFields_tExtractDelimitedFields_1[i_tExtractDelimitedFields_1] = newFields_tExtractDelimitedFields_1[i_tExtractDelimitedFields_1]
											.trim();
								}
								orders.ACCOUNT_KEY = row1.ACCOUNT_KEY;
								orders.PAYMENT = row1.PAYMENT;
								String temp_tExtractDelimitedFields_1 = null;
								orders.COUNTRY = 0 >= length_tExtractDelimitedFields_1 ? ""
										: newFields_tExtractDelimitedFields_1[0];
								orders.SUBREGION = 1 >= length_tExtractDelimitedFields_1 ? ""
										: newFields_tExtractDelimitedFields_1[1];
								orders.REGION = 2 >= length_tExtractDelimitedFields_1 ? ""
										: newFields_tExtractDelimitedFields_1[2];
								nb_line_tExtractDelimitedFields_1++;
							} catch (java.lang.Exception ex_tExtractDelimitedFields_1) {
								System.err.println(ex_tExtractDelimitedFields_1
										.getMessage());
								orders = null;
							}

							tos_count_tExtractDelimitedFields_1++;

							/**
							 * [tExtractDelimitedFields_1 main ] stop
							 */

							/**
							 * [tExtractDelimitedFields_1 process_data_begin ]
							 * start
							 */

							currentComponent = "tExtractDelimitedFields_1";

							/**
							 * [tExtractDelimitedFields_1 process_data_begin ]
							 * stop
							 */
							// Start of branch "orders"
							if (orders != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// orders
								// orders

								if (execStat) {
									runStat.updateStatOnConnection("orders"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "provinces"
								// /////////////////////////////////////////////

								boolean forceLoopprovinces = false;

								provincesStruct provincesObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									provincesHashKey.COUNTRY_NAME = orders.COUNTRY;

									provincesHashKey.hashCodeDirty = true;

									tHash_Lookup_provinces
											.lookup(provincesHashKey);

									if (!tHash_Lookup_provinces.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_provinces != null
										&& tHash_Lookup_provinces
												.getCount(provincesHashKey) > 1) { // G
																					// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'provinces' and it contains more one result from keys :  provinces.COUNTRY_NAME = '"
									// + provincesHashKey.COUNTRY_NAME + "'");
								} // G 071

								provincesStruct provinces = null;

								provincesStruct fromLookup_provinces = null;
								provinces = provincesDefault;

								if (tHash_Lookup_provinces != null
										&& tHash_Lookup_provinces.hasNext()) { // G
																				// 099

									fromLookup_provinces = tHash_Lookup_provinces
											.next();

								} // G 099

								if (fromLookup_provinces != null) {
									provinces = fromLookup_provinces;
								}

								// /////////////////////////////////////////////
								// Starting Lookup Table "discounts"
								// /////////////////////////////////////////////

								boolean forceLoopdiscounts = false;

								discountsStruct discountsObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									discountsHashKey.ID = orders.ACCOUNT_KEY;

									discountsHashKey.hashCodeDirty = true;

									tHash_Lookup_discounts
											.lookup(discountsHashKey);

								} // G_TM_M_020

								if (tHash_Lookup_discounts != null
										&& tHash_Lookup_discounts
												.getCount(discountsHashKey) > 1) { // G
																					// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'discounts' and it contains more one result from keys :  discounts.ID = '"
									// + discountsHashKey.ID + "'");
								} // G 071

								discountsStruct discounts = null;

								discountsStruct fromLookup_discounts = null;
								discounts = discountsDefault;

								if (tHash_Lookup_discounts != null
										&& tHash_Lookup_discounts.hasNext()) { // G
																				// 099

									fromLookup_discounts = tHash_Lookup_discounts
											.next();

								} // G 099

								if (fromLookup_discounts != null) {
									discounts = fromLookup_discounts;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									new_orders = null;
									RevenueByRegions = null;
									RevenueBySubregions = null;

									if (!rejectedInnerJoin_tMap_1) {

										// # Output table : 'new_orders'
										new_orders_tmp.ACCOUNT_KEY = orders.ACCOUNT_KEY;
										new_orders_tmp.COUNTRY_KEY = provinces.COUNTRY_KEY;
										new_orders_tmp.REGION = orders.REGION;
										new_orders_tmp.SUBREGION = orders.SUBREGION;
										new_orders_tmp.PAYMENT = orders.PAYMENT;
										new_orders_tmp.DISCOUNT = discounts.DISCOUNT;
										new_orders_tmp.PRICE = Relational
												.ISNULL(discounts.DISCOUNT) ? orders.PAYMENT
												: orders.PAYMENT
														* discounts.DISCOUNT;
										new_orders = new_orders_tmp;

										// # Output table : 'RevenueByRegions'
										RevenueByRegions_tmp.REGION = orders.REGION;
										RevenueByRegions_tmp.PRICE = Relational
												.ISNULL(discounts.DISCOUNT) ? orders.PAYMENT
												: orders.PAYMENT
														* discounts.DISCOUNT;
										RevenueByRegions = RevenueByRegions_tmp;

										// # Output table :
										// 'RevenueBySubregions'
										RevenueBySubregions_tmp.REGION = orders.REGION;
										RevenueBySubregions_tmp.SUBREGION = orders.SUBREGION;
										RevenueBySubregions_tmp.PRICE = Relational
												.ISNULL(discounts.DISCOUNT) ? orders.PAYMENT
												: orders.PAYMENT
														* discounts.DISCOUNT;
										RevenueBySubregions = RevenueBySubregions_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
								// Start of branch "new_orders"
								if (new_orders != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									// new_orders
									// new_orders

									if (execStat) {
										runStat.updateStatOnConnection(
												"new_orders" + iterateId, 1, 1);
									}

									// /////////////////////

									strBuffer_tLogRow_1 = new StringBuilder();

									if (new_orders.ACCOUNT_KEY != null) { //

										strBuffer_tLogRow_1
												.append(new_orders.ACCOUNT_KEY
														.setScale(
																0,
																java.math.RoundingMode.HALF_UP)
														.toPlainString());

									} //

									strBuffer_tLogRow_1.append("|");

									if (new_orders.COUNTRY_KEY != null) { //

										strBuffer_tLogRow_1
												.append(new_orders.COUNTRY_KEY
														.setScale(
																0,
																java.math.RoundingMode.HALF_UP)
														.toPlainString());

									} //

									strBuffer_tLogRow_1.append("|");

									if (new_orders.REGION != null) { //

										strBuffer_tLogRow_1.append(String
												.valueOf(new_orders.REGION));

									} //

									strBuffer_tLogRow_1.append("|");

									if (new_orders.SUBREGION != null) { //

										strBuffer_tLogRow_1.append(String
												.valueOf(new_orders.SUBREGION));

									} //

									strBuffer_tLogRow_1.append("|");

									if (new_orders.PAYMENT != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils
														.formatUnwithE(new_orders.PAYMENT));

									} //

									strBuffer_tLogRow_1.append("|");

									if (new_orders.DISCOUNT != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils
														.formatUnwithE(new_orders.DISCOUNT));

									} //

									strBuffer_tLogRow_1.append("|");

									if (new_orders.PRICE != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils
														.formatUnwithE(new_orders.PRICE));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
												.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(
														System.out));
										globalMap.put("tLogRow_CONSOLE",
												consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1
											.println(strBuffer_tLogRow_1
													.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
									// ////

									// ////

									// /////////////////////

									row2 = new_orders;

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									// row2
									// row2

									if (execStat) {
										runStat.updateStatOnConnection("row2"
												+ iterateId, 1, 1);
									}

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
									if (row2.ACCOUNT_KEY != null) {
										sb_tFileOutputDelimited_1
												.append(row2.ACCOUNT_KEY
														.setScale(
																0,
																java.math.RoundingMode.HALF_UP)
														.toPlainString());
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row2.COUNTRY_KEY != null) {
										sb_tFileOutputDelimited_1
												.append(row2.COUNTRY_KEY
														.setScale(
																0,
																java.math.RoundingMode.HALF_UP)
														.toPlainString());
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row2.REGION != null) {
										sb_tFileOutputDelimited_1
												.append(row2.REGION);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row2.SUBREGION != null) {
										sb_tFileOutputDelimited_1
												.append(row2.SUBREGION);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row2.PAYMENT != null) {
										sb_tFileOutputDelimited_1
												.append(row2.PAYMENT);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row2.DISCOUNT != null) {
										sb_tFileOutputDelimited_1
												.append(row2.DISCOUNT);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row2.PRICE != null) {
										sb_tFileOutputDelimited_1
												.append(row2.PRICE);
									}
									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_1",
											nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1
											.write(sb_tFileOutputDelimited_1
													.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1
									 * process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1
									 * process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_end
									 * ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_end
									 * ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "new_orders"

								// Start of branch "RevenueByRegions"
								if (RevenueByRegions != null) {

									/**
									 * [tAggregateRow_1_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									// RevenueByRegions
									// RevenueByRegions

									if (execStat) {
										runStat.updateStatOnConnection(
												"RevenueByRegions" + iterateId,
												1, 1);
									}

									operation_finder_tAggregateRow_1.REGION = RevenueByRegions.REGION;

									operation_finder_tAggregateRow_1.hashCodeDirty = true;

									operation_result_tAggregateRow_1 = hash_tAggregateRow_1
											.get(operation_finder_tAggregateRow_1);

									if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

										operation_result_tAggregateRow_1.REGION = operation_finder_tAggregateRow_1.REGION;

										hash_tAggregateRow_1
												.put(operation_result_tAggregateRow_1,
														operation_result_tAggregateRow_1);

									} // G_OutMain_AggR_001

									if (operation_result_tAggregateRow_1.PRICE_sum == null) {
										operation_result_tAggregateRow_1.PRICE_sum = new BigDecimal(
												0);
									}
									operation_result_tAggregateRow_1.PRICE_sum = operation_result_tAggregateRow_1.PRICE_sum
											.add(new BigDecimal(
													String.valueOf(RevenueByRegions.PRICE)));

									tos_count_tAggregateRow_1_AGGOUT++;

									/**
									 * [tAggregateRow_1_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT
									 * process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT
									 * process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end
									 * ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end
									 * ] stop
									 */

								} // End of branch "RevenueByRegions"

								// Start of branch "RevenueBySubregions"
								if (RevenueBySubregions != null) {

									/**
									 * [tAggregateRow_2_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_2";

									currentComponent = "tAggregateRow_2_AGGOUT";

									// RevenueBySubregions
									// RevenueBySubregions

									if (execStat) {
										runStat.updateStatOnConnection(
												"RevenueBySubregions"
														+ iterateId, 1, 1);
									}

									operation_finder_tAggregateRow_2.REGION = RevenueBySubregions.REGION;
									operation_finder_tAggregateRow_2.SUBREGION = RevenueBySubregions.SUBREGION;

									operation_finder_tAggregateRow_2.hashCodeDirty = true;

									operation_result_tAggregateRow_2 = hash_tAggregateRow_2
											.get(operation_finder_tAggregateRow_2);

									if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

										operation_result_tAggregateRow_2.REGION = operation_finder_tAggregateRow_2.REGION;
										operation_result_tAggregateRow_2.SUBREGION = operation_finder_tAggregateRow_2.SUBREGION;

										hash_tAggregateRow_2
												.put(operation_result_tAggregateRow_2,
														operation_result_tAggregateRow_2);

									} // G_OutMain_AggR_001

									if (operation_result_tAggregateRow_2.PRICE_sum == null) {
										operation_result_tAggregateRow_2.PRICE_sum = new BigDecimal(
												0);
									}
									operation_result_tAggregateRow_2.PRICE_sum = operation_result_tAggregateRow_2.PRICE_sum
											.add(new BigDecimal(
													String.valueOf(RevenueBySubregions.PRICE)));

									tos_count_tAggregateRow_2_AGGOUT++;

									/**
									 * [tAggregateRow_2_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_2_AGGOUT
									 * process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_2";

									currentComponent = "tAggregateRow_2_AGGOUT";

									/**
									 * [tAggregateRow_2_AGGOUT
									 * process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_2_AGGOUT process_data_end
									 * ] start
									 */

									currentVirtualComponent = "tAggregateRow_2";

									currentComponent = "tAggregateRow_2_AGGOUT";

									/**
									 * [tAggregateRow_2_AGGOUT process_data_end
									 * ] stop
									 */

								} // End of branch "RevenueBySubregions"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "orders"

						} // C_01

						/**
						 * [tExtractDelimitedFields_1 process_data_end ] start
						 */

						currentComponent = "tExtractDelimitedFields_1";

						/**
						 * [tExtractDelimitedFields_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					stmt_tDBInput_1.close();

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tExtractDelimitedFields_1 end ] start
				 */

				currentComponent = "tExtractDelimitedFields_1";

				globalMap.put("tExtractDelimitedFields_1_NB_LINE",
						nb_line_tExtractDelimitedFields_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractDelimitedFields_1", true);
				end_Hash.put("tExtractDelimitedFields_1",
						System.currentTimeMillis());

				/**
				 * [tExtractDelimitedFields_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_provinces != null) {
					tHash_Lookup_provinces.endGet();
				}
				globalMap.remove("tHash_Lookup_provinces");

				if (tHash_Lookup_discounts != null) {
					tHash_Lookup_discounts.endGet();
				}
				globalMap.remove("tHash_Lookup_discounts");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("orders" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"new_orders" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("RevenueByRegions"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				class BytesLimit65535_tFileOutputExcel_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();

				int columnIndex_tFileOutputExcel_1 = 0;

				int nb_line_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "D:/maryia_rekhva/git/maryia_rekhva_talend/task_02/Revenue.xls";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(
						fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
				if (file_tFileOutputExcel_1.exists()) {
					isFileGenerated_tFileOutputExcel_1 = false;
				}
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1
						.getParentFile();
				if (parentFile_tFileOutputExcel_1 != null
						&& !parentFile_tFileOutputExcel_1.exists()) {

					parentFile_tFileOutputExcel_1.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
				if (file_tFileOutputExcel_1.exists()) {
					jxl.Workbook workbook_tFileOutputExcel_1 = jxl.Workbook
							.getWorkbook(file_tFileOutputExcel_1,
									workbookSettings_tFileOutputExcel_1);
					workbookSettings_tFileOutputExcel_1.setWriteAccess(null);
					writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tFileOutputExcel_1, false)),
							workbook_tFileOutputExcel_1, true,
							workbookSettings_tFileOutputExcel_1);
				} else {
					writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											fileName_tFileOutputExcel_1)),
							true, workbookSettings_tFileOutputExcel_1);
				}

				writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
						.getSheet("Regions");
				if (writableSheet_tFileOutputExcel_1 == null) {
					writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1
							.createSheet("Regions",
									writeableWorkbook_tFileOutputExcel_1
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_1 = new int[2];
				for (int i_tFileOutputExcel_1 = 0; i_tFileOutputExcel_1 < 2; i_tFileOutputExcel_1++) {
					int fitCellViewSize_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
							.getColumnView(i_tFileOutputExcel_1).getSize();
					fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] = fitCellViewSize_tFileOutputExcel_1 / 256;
					if (fitCellViewSize_tFileOutputExcel_1 % 256 != 0) {
						fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] += 1;
					}
				}

				if (startRowNum_tFileOutputExcel_1 == 0) {
					// modif end
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(0,
									nb_line_tFileOutputExcel_1, "REGION"));
					// modif end
					fitWidth_tFileOutputExcel_1[0] = fitWidth_tFileOutputExcel_1[0] > 6 ? fitWidth_tFileOutputExcel_1[0]
							: 6;
					// modif start
					writableSheet_tFileOutputExcel_1
							.addCell(new jxl.write.Label(1,
									nb_line_tFileOutputExcel_1, "PRICE"));
					// modif end
					fitWidth_tFileOutputExcel_1[1] = fitWidth_tFileOutputExcel_1[1] > 5 ? fitWidth_tFileOutputExcel_1[1]
							: 5;
					nb_line_tFileOutputExcel_1++;
				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				class BytesLimit65535_tAggregateRow_1_AGGIN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_1_AGGIN().limitLog4jByte();

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE",
						values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row5.REGION = aggregated_row_tAggregateRow_1.REGION;

					if (aggregated_row_tAggregateRow_1.PRICE_sum != null) {
						row5.PRICE = aggregated_row_tAggregateRow_1.PRICE_sum
								.floatValue();

					} else {

						row5.PRICE = null;

					}

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 main ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					// row5
					// row5

					if (execStat) {
						runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
					}

					if (row5.REGION != null) {

						// modif start

						columnIndex_tFileOutputExcel_1 = 0;

						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1
										+ nb_line_tFileOutputExcel_1,

								// modif end
								row5.REGION);
						// modif start
						// If we keep the cell format from the existing cell in
						// sheet

						// modif ends
						writableSheet_tFileOutputExcel_1
								.addCell(cell_0_tFileOutputExcel_1);
						int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1
								.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[0] = fitWidth_tFileOutputExcel_1[0] > currentWith_0_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[0]
								: currentWith_0_tFileOutputExcel_1 + 2;
					}

					if (row5.PRICE != null) {

						// modif start

						columnIndex_tFileOutputExcel_1 = 1;

						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Number(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1
										+ nb_line_tFileOutputExcel_1,

								// modif end
								row5.PRICE);
						// modif start
						// If we keep the cell format from the existing cell in
						// sheet

						// modif ends
						writableSheet_tFileOutputExcel_1
								.addCell(cell_1_tFileOutputExcel_1);
						int currentWith_1_tFileOutputExcel_1 = String
								.valueOf(
										((jxl.write.Number) cell_1_tFileOutputExcel_1)
												.getValue()).trim().length();
						currentWith_1_tFileOutputExcel_1 = currentWith_1_tFileOutputExcel_1 > 10 ? 10
								: currentWith_1_tFileOutputExcel_1;
						fitWidth_tFileOutputExcel_1[1] = fitWidth_tFileOutputExcel_1[1] > currentWith_1_tFileOutputExcel_1 ? fitWidth_tFileOutputExcel_1[1]
								: currentWith_1_tFileOutputExcel_1 + 2;
					}

					nb_line_tFileOutputExcel_1++;

					tos_count_tFileOutputExcel_1++;

					/**
					 * [tFileOutputExcel_1 main ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				columnIndex_tFileOutputExcel_1 = 0;

				writableSheet_tFileOutputExcel_1.setColumnView(
						columnIndex_tFileOutputExcel_1,
						fitWidth_tFileOutputExcel_1[0]);

				columnIndex_tFileOutputExcel_1 = 1;

				writableSheet_tFileOutputExcel_1.setColumnView(
						columnIndex_tFileOutputExcel_1,
						fitWidth_tFileOutputExcel_1[1]);

				writeableWorkbook_tFileOutputExcel_1.write();
				writeableWorkbook_tFileOutputExcel_1.close();

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("RevenueBySubregions"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash
						.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputExcel_2 = 0;

				class BytesLimit65535_tFileOutputExcel_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputExcel_2().limitLog4jByte();

				int columnIndex_tFileOutputExcel_2 = 0;

				int nb_line_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = "D:/maryia_rekhva/git/maryia_rekhva_talend/task_02/Revenue.xls";
				java.io.File file_tFileOutputExcel_2 = new java.io.File(
						fileName_tFileOutputExcel_2);
				boolean isFileGenerated_tFileOutputExcel_2 = true;
				if (file_tFileOutputExcel_2.exists()) {
					isFileGenerated_tFileOutputExcel_2 = false;
				}
				// create directory only if not exists
				java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2
						.getParentFile();
				if (parentFile_tFileOutputExcel_2 != null
						&& !parentFile_tFileOutputExcel_2.exists()) {

					parentFile_tFileOutputExcel_2.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
				if (file_tFileOutputExcel_2.exists()) {
					jxl.Workbook workbook_tFileOutputExcel_2 = jxl.Workbook
							.getWorkbook(file_tFileOutputExcel_2,
									workbookSettings_tFileOutputExcel_2);
					workbookSettings_tFileOutputExcel_2.setWriteAccess(null);
					writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											file_tFileOutputExcel_2, false)),
							workbook_tFileOutputExcel_2, true,
							workbookSettings_tFileOutputExcel_2);
				} else {
					writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
							new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											fileName_tFileOutputExcel_2)),
							true, workbookSettings_tFileOutputExcel_2);
				}

				writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2
						.getSheet("Subregions");
				if (writableSheet_tFileOutputExcel_2 == null) {
					writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2
							.createSheet("Subregions",
									writeableWorkbook_tFileOutputExcel_2
											.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
						.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_2 = new int[3];
				for (int i_tFileOutputExcel_2 = 0; i_tFileOutputExcel_2 < 3; i_tFileOutputExcel_2++) {
					int fitCellViewSize_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
							.getColumnView(i_tFileOutputExcel_2).getSize();
					fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] = fitCellViewSize_tFileOutputExcel_2 / 256;
					if (fitCellViewSize_tFileOutputExcel_2 % 256 != 0) {
						fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] += 1;
					}
				}

				if (startRowNum_tFileOutputExcel_2 == 0) {
					// modif end
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(0,
									nb_line_tFileOutputExcel_2, "REGION"));
					// modif end
					fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > 6 ? fitWidth_tFileOutputExcel_2[0]
							: 6;
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(1,
									nb_line_tFileOutputExcel_2, "SUBREGION"));
					// modif end
					fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > 9 ? fitWidth_tFileOutputExcel_2[1]
							: 9;
					// modif start
					writableSheet_tFileOutputExcel_2
							.addCell(new jxl.write.Label(2,
									nb_line_tFileOutputExcel_2, "PRICE"));
					// modif end
					fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > 5 ? fitWidth_tFileOutputExcel_2[2]
							: 5;
					nb_line_tFileOutputExcel_2++;
				}

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN",
						System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				class BytesLimit65535_tAggregateRow_2_AGGIN {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAggregateRow_2_AGGIN().limitLog4jByte();

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE",
						values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row6.REGION = aggregated_row_tAggregateRow_2.REGION;

					row6.SUBREGION = aggregated_row_tAggregateRow_2.SUBREGION;

					if (aggregated_row_tAggregateRow_2.PRICE_sum != null) {
						row6.PRICE = aggregated_row_tAggregateRow_2.PRICE_sum
								.floatValue();

					} else {

						row6.PRICE = null;

					}

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_2 main ] start
					 */

					currentComponent = "tFileOutputExcel_2";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					if (row6.REGION != null) {

						// modif start

						columnIndex_tFileOutputExcel_2 = 0;

						jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2
										+ nb_line_tFileOutputExcel_2,

								// modif end
								row6.REGION);
						// modif start
						// If we keep the cell format from the existing cell in
						// sheet

						// modif ends
						writableSheet_tFileOutputExcel_2
								.addCell(cell_0_tFileOutputExcel_2);
						int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2
								.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > currentWith_0_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[0]
								: currentWith_0_tFileOutputExcel_2 + 2;
					}

					if (row6.SUBREGION != null) {

						// modif start

						columnIndex_tFileOutputExcel_2 = 1;

						jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2
										+ nb_line_tFileOutputExcel_2,

								// modif end
								row6.SUBREGION);
						// modif start
						// If we keep the cell format from the existing cell in
						// sheet

						// modif ends
						writableSheet_tFileOutputExcel_2
								.addCell(cell_1_tFileOutputExcel_2);
						int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2
								.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > currentWith_1_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[1]
								: currentWith_1_tFileOutputExcel_2 + 2;
					}

					if (row6.PRICE != null) {

						// modif start

						columnIndex_tFileOutputExcel_2 = 2;

						jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Number(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2
										+ nb_line_tFileOutputExcel_2,

								// modif end
								row6.PRICE);
						// modif start
						// If we keep the cell format from the existing cell in
						// sheet

						// modif ends
						writableSheet_tFileOutputExcel_2
								.addCell(cell_2_tFileOutputExcel_2);
						int currentWith_2_tFileOutputExcel_2 = String
								.valueOf(
										((jxl.write.Number) cell_2_tFileOutputExcel_2)
												.getValue()).trim().length();
						currentWith_2_tFileOutputExcel_2 = currentWith_2_tFileOutputExcel_2 > 10 ? 10
								: currentWith_2_tFileOutputExcel_2;
						fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > currentWith_2_tFileOutputExcel_2 ? fitWidth_tFileOutputExcel_2[2]
								: currentWith_2_tFileOutputExcel_2 + 2;
					}

					nb_line_tFileOutputExcel_2++;

					tos_count_tFileOutputExcel_2++;

					/**
					 * [tFileOutputExcel_2 main ] stop
					 */

					/**
					 * [tFileOutputExcel_2 process_data_begin ] start
					 */

					currentComponent = "tFileOutputExcel_2";

					/**
					 * [tFileOutputExcel_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_2 process_data_end ] start
					 */

					currentComponent = "tFileOutputExcel_2";

					/**
					 * [tFileOutputExcel_2 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN",
						System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				columnIndex_tFileOutputExcel_2 = 0;

				writableSheet_tFileOutputExcel_2.setColumnView(
						columnIndex_tFileOutputExcel_2,
						fitWidth_tFileOutputExcel_2[0]);

				columnIndex_tFileOutputExcel_2 = 1;

				writableSheet_tFileOutputExcel_2.setColumnView(
						columnIndex_tFileOutputExcel_2,
						fitWidth_tFileOutputExcel_2[1]);

				columnIndex_tFileOutputExcel_2 = 2;

				writableSheet_tFileOutputExcel_2.setColumnView(
						columnIndex_tFileOutputExcel_2,
						fitWidth_tFileOutputExcel_2[2]);

				writeableWorkbook_tFileOutputExcel_2.write();
				writeableWorkbook_tFileOutputExcel_2.close();

				nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 - 1;

				globalMap.put("tFileOutputExcel_2_NB_LINE",
						nb_line_tFileOutputExcel_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_provinces");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_discounts");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tExtractDelimitedFields_1 finally ] start
				 */

				currentComponent = "tExtractDelimitedFields_1";

				/**
				 * [tExtractDelimitedFields_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class provincesStruct implements
			routines.system.IPersistableComparableLookupRow<provincesStruct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal COUNTRY_KEY;

		public BigDecimal getCOUNTRY_KEY() {
			return this.COUNTRY_KEY;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public String ISO2;

		public String getISO2() {
			return this.ISO2;
		}

		public String ISO3;

		public String getISO3() {
			return this.ISO3;
		}

		public String PHONE_CODE;

		public String getPHONE_CODE() {
			return this.PHONE_CODE;
		}

		public String IRU;

		public String getIRU() {
			return this.IRU;
		}

		public String COUNTRY_PROVINCE_CODE;

		public String getCOUNTRY_PROVINCE_CODE() {
			return this.COUNTRY_PROVINCE_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.COUNTRY_NAME == null) ? 0 : this.COUNTRY_NAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final provincesStruct other = (provincesStruct) obj;

			if (this.COUNTRY_NAME == null) {
				if (other.COUNTRY_NAME != null)
					return false;

			} else if (!this.COUNTRY_NAME.equals(other.COUNTRY_NAME))

				return false;

			return true;
		}

		public void copyDataTo(provincesStruct other) {

			other.COUNTRY_KEY = this.COUNTRY_KEY;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.ISO2 = this.ISO2;
			other.ISO3 = this.ISO3;
			other.PHONE_CODE = this.PHONE_CODE;
			other.IRU = this.IRU;
			other.COUNTRY_PROVINCE_CODE = this.COUNTRY_PROVINCE_CODE;

		}

		public void copyKeysDataTo(provincesStruct other) {

			other.COUNTRY_NAME = this.COUNTRY_NAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TASK_02_elt.length) {
					if (length < 1024
							&& commonByteArray_TASK_02_elt.length == 0) {
						commonByteArray_TASK_02_elt = new byte[1024];
					} else {
						commonByteArray_TASK_02_elt = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TASK_02_elt, 0, length);
				strReturn = new String(commonByteArray_TASK_02_elt, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.COUNTRY_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COUNTRY_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.COUNTRY_KEY = (BigDecimal) ois.readObject();

				this.ISO2 = readString(dis, ois);

				this.ISO3 = readString(dis, ois);

				this.PHONE_CODE = readString(dis, ois);

				this.IRU = readString(dis, ois);

				this.COUNTRY_PROVINCE_CODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.COUNTRY_KEY);

				writeString(this.ISO2, dos, oos);

				writeString(this.ISO3, dos, oos);

				writeString(this.PHONE_CODE, dos, oos);

				writeString(this.IRU, dos, oos);

				writeString(this.COUNTRY_PROVINCE_CODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COUNTRY_KEY=" + String.valueOf(COUNTRY_KEY));
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",ISO2=" + ISO2);
			sb.append(",ISO3=" + ISO3);
			sb.append(",PHONE_CODE=" + PHONE_CODE);
			sb.append(",IRU=" + IRU);
			sb.append(",COUNTRY_PROVINCE_CODE=" + COUNTRY_PROVINCE_CODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(provincesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.COUNTRY_NAME,
					other.COUNTRY_NAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				provincesStruct provinces = new provincesStruct();

				/**
				 * [tAdvancedHash_provinces begin ] start
				 */

				ok_Hash.put("tAdvancedHash_provinces", false);
				start_Hash.put("tAdvancedHash_provinces",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_provinces";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("provinces" + iterateId,
								0, 0);

					}
				}

				int tos_count_tAdvancedHash_provinces = 0;

				class BytesLimit65535_tAdvancedHash_provinces {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_provinces().limitLog4jByte();

				// connection name:provinces
				// source node:tDBInput_2 - inputs:(after_tDBInput_1)
				// outputs:(provinces,provinces) | target
				// node:tAdvancedHash_provinces - inputs:(provinces) outputs:()
				// linked node: tMap_1 - inputs:(orders,provinces,discounts)
				// outputs:(new_orders,RevenueByRegions,RevenueBySubregions)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_provinces = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<provincesStruct> tHash_Lookup_provinces = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<provincesStruct> getLookup(matchingModeEnum_provinces);

				globalMap.put("tHash_Lookup_provinces", tHash_Lookup_provinces);

				/**
				 * [tAdvancedHash_provinces begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				boolean isTimeZoneNull_tDBInput_2 = false;
				boolean isConnectionWrapped_tDBInput_2 = !(conn_tDBInput_2 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_2
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_2 = null;
				if (isConnectionWrapped_tDBInput_2) {
					unwrappedOraConn_tDBInput_2 = conn_tDBInput_2
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_2 != null) {
						isTimeZoneNull_tDBInput_2 = (unwrappedOraConn_tDBInput_2
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_2 = (((oracle.jdbc.OracleConnection) conn_tDBInput_2)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_2) {
					java.sql.Statement stmtGetTZ_tDBInput_2 = conn_tDBInput_2
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_2 = stmtGetTZ_tDBInput_2
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_2 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_2.next()) {
						sessionTimezone_tDBInput_2 = rsGetTZ_tDBInput_2
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_2
							&& unwrappedOraConn_tDBInput_2 != null) {
						unwrappedOraConn_tDBInput_2
								.setSessionTimeZone(sessionTimezone_tDBInput_2);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_2)
								.setSessionTimeZone(sessionTimezone_tDBInput_2);
					}
				}

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  TEST_USER.PROVINCES.COUNTRY_KEY, \n  TEST_USER.PROVINCES.COUNTRY_NAME, \n  TEST_USER.PROVINCES.ISO2, \n  TEST_US"
						+ "ER.PROVINCES.ISO3, \n  TEST_USER.PROVINCES.PHONE_CODE, \n  TEST_USER.PROVINCES.IRU, \n  TEST_USER.PROVINCES.COUNTRY_PROVINC"
						+ "E_CODE\nFROM TEST_USER.PROVINCES";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							provinces.COUNTRY_KEY = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								provinces.COUNTRY_KEY = rs_tDBInput_2
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							provinces.COUNTRY_NAME = null;
						} else {

							provinces.COUNTRY_NAME = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							provinces.ISO2 = null;
						} else {

							provinces.ISO2 = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							provinces.ISO3 = null;
						} else {

							provinces.ISO3 = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							provinces.PHONE_CODE = null;
						} else {

							provinces.PHONE_CODE = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							provinces.IRU = null;
						} else {

							provinces.IRU = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							provinces.COUNTRY_PROVINCE_CODE = null;
						} else {

							provinces.COUNTRY_PROVINCE_CODE = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 7, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_provinces main ] start
						 */

						currentComponent = "tAdvancedHash_provinces";

						// provinces
						// provinces

						if (execStat) {
							runStat.updateStatOnConnection("provinces"
									+ iterateId, 1, 1);
						}

						provincesStruct provinces_HashRow = new provincesStruct();

						provinces_HashRow.COUNTRY_KEY = provinces.COUNTRY_KEY;

						provinces_HashRow.COUNTRY_NAME = provinces.COUNTRY_NAME;

						provinces_HashRow.ISO2 = provinces.ISO2;

						provinces_HashRow.ISO3 = provinces.ISO3;

						provinces_HashRow.PHONE_CODE = provinces.PHONE_CODE;

						provinces_HashRow.IRU = provinces.IRU;

						provinces_HashRow.COUNTRY_PROVINCE_CODE = provinces.COUNTRY_PROVINCE_CODE;

						tHash_Lookup_provinces.put(provinces_HashRow);

						tos_count_tAdvancedHash_provinces++;

						/**
						 * [tAdvancedHash_provinces main ] stop
						 */

						/**
						 * [tAdvancedHash_provinces process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_provinces";

						/**
						 * [tAdvancedHash_provinces process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_provinces process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_provinces";

						/**
						 * [tAdvancedHash_provinces process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_provinces end ] start
				 */

				currentComponent = "tAdvancedHash_provinces";

				tHash_Lookup_provinces.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("provinces" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_provinces", true);
				end_Hash.put("tAdvancedHash_provinces",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_provinces end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_provinces finally ] start
				 */

				currentComponent = "tAdvancedHash_provinces";

				/**
				 * [tAdvancedHash_provinces finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class discountsStruct implements
			routines.system.IPersistableComparableLookupRow<discountsStruct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ID;

		public BigDecimal getID() {
			return this.ID;
		}

		public Float DISCOUNT;

		public Float getDISCOUNT() {
			return this.DISCOUNT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.ID == null) ? 0 : new Double(
								this.ID.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final discountsStruct other = (discountsStruct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if ((other.ID == null) || (this.ID.compareTo(other.ID) != 0))

				return false;

			return true;
		}

		public void copyDataTo(discountsStruct other) {

			other.ID = this.ID;
			other.DISCOUNT = this.DISCOUNT;

		}

		public void copyKeysDataTo(discountsStruct other) {

			other.ID = this.ID;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.DISCOUNT = null;
				} else {
					this.DISCOUNT = dis.readFloat();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(discountsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ID;

		public BigDecimal getID() {
			return this.ID;
		}

		public Float DISCOUNT;

		public Float getDISCOUNT() {
			return this.DISCOUNT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ID = this.ID;
			other.DISCOUNT = this.DISCOUNT;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID = this.ID;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ID = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNT = null;
					} else {
						this.DISCOUNT = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ID);

				// Float

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TASK_02_elt = new byte[0];
		static byte[] commonByteArray_TASK_02_elt = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal ID;

		public BigDecimal getID() {
			return this.ID;
		}

		public Float DISCOUNT;

		public Float getDISCOUNT() {
			return this.DISCOUNT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ID = this.ID;
			other.DISCOUNT = this.DISCOUNT;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ID = this.ID;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TASK_02_elt) {

				try {

					int length = 0;

					this.ID = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNT = null;
					} else {
						this.DISCOUNT = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.ID);

				// Float

				if (this.DISCOUNT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",DISCOUNT=" + String.valueOf(DISCOUNT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				row4Struct row4 = new row4Struct();

				discountsStruct discounts = new discountsStruct();

				/**
				 * [tAdvancedHash_discounts begin ] start
				 */

				ok_Hash.put("tAdvancedHash_discounts", false);
				start_Hash.put("tAdvancedHash_discounts",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_discounts";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("discounts" + iterateId,
								0, 0);

					}
				}

				int tos_count_tAdvancedHash_discounts = 0;

				class BytesLimit65535_tAdvancedHash_discounts {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_discounts().limitLog4jByte();

				// connection name:discounts
				// source node:tUnite_1 - inputs:(row3,row4)
				// outputs:(discounts,discounts) | target
				// node:tAdvancedHash_discounts - inputs:(discounts) outputs:()
				// linked node: tMap_1 - inputs:(orders,provinces,discounts)
				// outputs:(new_orders,RevenueByRegions,RevenueBySubregions)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_discounts = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<discountsStruct> tHash_Lookup_discounts = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<discountsStruct> getLookup(matchingModeEnum_discounts);

				globalMap.put("tHash_Lookup_discounts", tHash_Lookup_discounts);

				/**
				 * [tAdvancedHash_discounts begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tUnite_1 = 0;

				class BytesLimit65535_tUnite_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUnite_1().limitLog4jByte();

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				class BytesLimit65535_tDBInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_3().limitLog4jByte();

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				boolean isTimeZoneNull_tDBInput_3 = false;
				boolean isConnectionWrapped_tDBInput_3 = !(conn_tDBInput_3 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_3
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_3 = null;
				if (isConnectionWrapped_tDBInput_3) {
					unwrappedOraConn_tDBInput_3 = conn_tDBInput_3
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_3 != null) {
						isTimeZoneNull_tDBInput_3 = (unwrappedOraConn_tDBInput_3
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_3 = (((oracle.jdbc.OracleConnection) conn_tDBInput_3)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_3) {
					java.sql.Statement stmtGetTZ_tDBInput_3 = conn_tDBInput_3
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_3 = stmtGetTZ_tDBInput_3
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_3 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_3.next()) {
						sessionTimezone_tDBInput_3 = rsGetTZ_tDBInput_3
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_3
							&& unwrappedOraConn_tDBInput_3 != null) {
						unwrappedOraConn_tDBInput_3
								.setSessionTimeZone(sessionTimezone_tDBInput_3);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_3)
								.setSessionTimeZone(sessionTimezone_tDBInput_3);
					}
				}

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  TEST_USER.DISCOUNTS_HIGH.\"ID\", \n  TEST_USER.DISCOUNTS_HIGH.DISCOUNT\nFROM TEST_USER.DISCOUNTS_HIGH";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.ID = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row3.ID = rs_tDBInput_3.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.DISCOUNT = null;
						} else {

							if (rs_tDBInput_3.getObject(2) != null) {
								row3.DISCOUNT = rs_tDBInput_3.getFloat(2);
							} else {

								row3.DISCOUNT = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// row4
						// row3

						// ////////

						// for output
						discounts = new discountsStruct();

						discounts.ID = row3.ID;
						discounts.DISCOUNT = row3.DISCOUNT;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_discounts main ] start
						 */

						currentComponent = "tAdvancedHash_discounts";

						// discounts
						// discounts

						if (execStat) {
							runStat.updateStatOnConnection("discounts"
									+ iterateId, 1, 1);
						}

						discountsStruct discounts_HashRow = new discountsStruct();

						discounts_HashRow.ID = discounts.ID;

						discounts_HashRow.DISCOUNT = discounts.DISCOUNT;

						tHash_Lookup_discounts.put(discounts_HashRow);

						tos_count_tAdvancedHash_discounts++;

						/**
						 * [tAdvancedHash_discounts main ] stop
						 */

						/**
						 * [tAdvancedHash_discounts process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_discounts";

						/**
						 * [tAdvancedHash_discounts process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_discounts process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_discounts";

						/**
						 * [tAdvancedHash_discounts process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					stmt_tDBInput_3.close();

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				class BytesLimit65535_tDBInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_4().limitLog4jByte();

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				boolean isTimeZoneNull_tDBInput_4 = false;
				boolean isConnectionWrapped_tDBInput_4 = !(conn_tDBInput_4 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_4
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_4 = null;
				if (isConnectionWrapped_tDBInput_4) {
					unwrappedOraConn_tDBInput_4 = conn_tDBInput_4
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_4 != null) {
						isTimeZoneNull_tDBInput_4 = (unwrappedOraConn_tDBInput_4
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_4 = (((oracle.jdbc.OracleConnection) conn_tDBInput_4)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_4) {
					java.sql.Statement stmtGetTZ_tDBInput_4 = conn_tDBInput_4
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_4 = stmtGetTZ_tDBInput_4
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_4 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_4.next()) {
						sessionTimezone_tDBInput_4 = rsGetTZ_tDBInput_4
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_4
							&& unwrappedOraConn_tDBInput_4 != null) {
						unwrappedOraConn_tDBInput_4
								.setSessionTimeZone(sessionTimezone_tDBInput_4);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_4)
								.setSessionTimeZone(sessionTimezone_tDBInput_4);
					}
				}

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  TEST_USER.DISCOUNTS_LOW.\"ID\", \n  TEST_USER.DISCOUNTS_LOW.DISCOUNT\nFROM TEST_USER.DISCOUNTS_LOW";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.ID = null;
						} else {

							if (rs_tDBInput_4.getObject(1) != null) {
								row4.ID = rs_tDBInput_4.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.DISCOUNT = null;
						} else {

							if (rs_tDBInput_4.getObject(2) != null) {
								row4.DISCOUNT = rs_tDBInput_4.getFloat(2);
							} else {

								row4.DISCOUNT = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row3
						// row4

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// ////////

						// for output
						discounts = new discountsStruct();

						discounts.ID = row4.ID;
						discounts.DISCOUNT = row4.DISCOUNT;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_discounts main ] start
						 */

						currentComponent = "tAdvancedHash_discounts";

						// discounts
						// discounts

						if (execStat) {
							runStat.updateStatOnConnection("discounts"
									+ iterateId, 1, 1);
						}

						discountsStruct discounts_HashRow = new discountsStruct();

						discounts_HashRow.ID = discounts.ID;

						discounts_HashRow.DISCOUNT = discounts.DISCOUNT;

						tHash_Lookup_discounts.put(discounts_HashRow);

						tos_count_tAdvancedHash_discounts++;

						/**
						 * [tAdvancedHash_discounts main ] stop
						 */

						/**
						 * [tAdvancedHash_discounts process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_discounts";

						/**
						 * [tAdvancedHash_discounts process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_discounts process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_discounts";

						/**
						 * [tAdvancedHash_discounts process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					stmt_tDBInput_4.close();

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_discounts end ] start
				 */

				currentComponent = "tAdvancedHash_discounts";

				tHash_Lookup_discounts.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("discounts" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_discounts", true);
				end_Hash.put("tAdvancedHash_discounts",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_discounts end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_discounts finally ] start
				 */

				currentComponent = "tAdvancedHash_discounts";

				/**
				 * [tAdvancedHash_discounts finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final elt eltClass = new elt();

		int exitCode = eltClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = elt.class.getClassLoader()
					.getResourceAsStream(
							"task_02/elt_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = elt.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : elt");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 229011 characters generated by Talend Open Studio for Data Integration on the
 * May 9, 2018 6:53:30 AM MSK
 ************************************************************************************************/
